input {
  pipe {
    command => "tcpdump -vvv -tttt -begn"
  }
}

filter {

  # marge multiline log --------------------------------------------------------
  # detect first line by numeric(timestamp) starting, then split it into
  # - first line -> "message"
  # - followings -> "detail"

  multiline {
    pattern => "^[^0-9]"
    what => "previous"
  }

  if "multiline" in [tags] {
    grok {
      match => { "message" => "%{DATA:message}\n%{GREEDYDATA:detail}" }
      overwrite => [ "message" ]
    }
  }

  # parse "message" ------------------------------------------------------------

  mutate {
    # copy "message" to "log" for debug
    # - "log" store original data
    # - "message" will be removed head infomation
    #add_field => { "log" => "%{message}" }

    # remove logstash added fields
    remove_field => [ "@version" ]
  }

  # extract timestamp

	grok {
		match => {
      "message" => "%{TIMESTAMP_ISO8601:timestamp} %{MAC:[src][mac]} > %{GREEDYDATA:message}"
    }
    overwrite => [ "message" ]
    tag_on_failure => [ "invalid", "invalid_timestamp" ]
	}

  date {
    match => [ "timestamp", "YYYY-MM-dd HH:mm:ss.SSSSSS", "ISO8601" ]
    remove_field => [ "timestamp" ]
  }

  # parse message

	grok {
		match => { "message" => [
      "%{MAC:[dest][mac]}, %{GREEDYDATA:message}",
      "Broadcast, %{GREEDYDATA:message}"
    ]}
    overwrite => [ "message" ]
    tag_on_failure => [ "invalid", "invalid_mac" ]
	}

	grok{
		match => { "message" => [
      "ethertype %{WORD:protocol} \(%{WORD}\), length %{POSINT:length}: %{GREEDYDATA:message}"
    ]}
    overwrite => [ "message" ]
    tag_on_failure => [ "invalid", "invalid_protocol" ]
	}

	grok{
		match => { "message" => [
      "\(%{GREEDYDATA:params}\) %{NOTSPACE:[src][ip]}.%{POSINT:[src][port]} > %{NOTSPACE:[dest][ip]}.%{POSINT:[dest][port]}: %{GREEDYDATA:message}",
      "Flags \[%{DATA:flags}\], cksum %{WORD:cksum} \(%{WORD}\), seq %{NOTSPACE:seq}, ack %{POSINT:ack}, win %{POSINT:win}, %{GREEDYDATA:message}"
    ]}
    overwrite => [ "message" ]
    break_on_match => false
    tag_on_failure => [ "invalid", "invalid_message" ]
	}

  kv {
    source => "params"
    target => "param"
    field_split => ", "
    value_split => " "
  }

  # detect outbound/inbound by local address

  if [src][ip] == "10.0.1.2" and [dest][ip] == "10.0.1.2" {
    mutate {
      add_tag => [ "loopback" ]
    }
  } else if [src][ip] =~ /10\.0\.1\..*/ and [dest][ip] =~ /10\.0\.1\..*/ {
    mutate {
      add_tag => [ "internal" ]
    }
  } else if [src][ip] == "10.0.1.2" {
    mutate {
      add_tag => [ "outbound" ]
    }
  } else if [dest][ip] == "10.0.1.2" {
    mutate {
      add_tag => [ "inbound" ]
    }
  }

  # IP anotation ---------------------------------------------------------------

  ## DNS
  mutate {
    add_field => {
      "[src][ns]" => "%{[src][ip]}"
      "[dest][ns]" => "%{[dest][ip]}"
    }
  }
  dns {
    reverse => [ "[src][ns]", "[dest][ns]" ]
    action => "replace"
    hit_cache_size => 1024
    failed_cache_size => 1024
  }

  ## GeoIP
  geoip {
    fields => [ "location", "country_name", "region_name" ]
    source => "[src][ip]"
    target => "[src][geo]"
  }
  geoip {
    fields => [ "location", "country_name", "region_name" ]
    source => "[dest][ip]"
    target => "[dest][geo]"
  }

  # convert types --------------------------------------------------------------

  mutate {
    convert => {
     "length" => "integer"
     "win" => "integer"
    }
  }
}

output {
  stdout {}
  elasticsearch {
    index => "tcpdump"
  }
}
